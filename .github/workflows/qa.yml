name: Deploy API to QA

on:
  push:
    branches:
      - qa

jobs:
  deploy-cti:
    name: Deploy API to CTI
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: Setup Node
      uses: actions/setup-node@v1
      with:
        node-version: '12.13.1'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.CTI_QA_KEY }}
        aws-secret-access-key: ${{ secrets.CTI_QA_SECRET }}
        aws-region: eu-west-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push API image to Amazon ECR
      id: build-api-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: fight-together/api
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -f ./Dockerfile-api -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Build, tag, and push MIGRATIONS image to Amazon ECR
      id: build-migrations-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: fight-together/migrations
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -f ./Dockerfile-migrate -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Pull API service current task definition
      run: |
        aws ecs describe-task-definition --task-definition qa-fight-together-api --query taskDefinition > api-task-definition.json

    - name: Update API container version in task definition
      id: api-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: api-task-definition.json
        container-name: api
        image: ${{ steps.build-api-image.outputs.image }}

    - name: Update MIGRATIONS container version in task definition
      id: migrations-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: api-task-definition.json
        container-name: migrations
        image: ${{ steps.build-migrations-image.outputs.image }}

    - name: Deploy API service
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.migrations-task-def.outputs.task-definition }}
        service: qa-fight-together-api
        cluster: qa-fight-together
        wait-for-service-stability: true

  deploy-ni:
    name: Deploy API to NI
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: Setup Node
      uses: actions/setup-node@v1
      with:
        node-version: '12.13.1'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.NI_QA_KEY }}
        aws-secret-access-key: ${{ secrets.NI_QA_SECRET }}
        aws-region: eu-west-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push API image to Amazon ECR
      id: build-api-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ni/api
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -f ./Dockerfile-api -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Build, tag, and push MIGRATIONS image to Amazon ECR
      id: build-migrations-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ni/migrations
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -f ./Dockerfile-migrate -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Pull API service current task definition
      run: |
        aws ecs describe-task-definition --task-definition qa-ni-api --query taskDefinition > api-task-definition.json

    - name: Update API container version in task definition
      id: api-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: api-task-definition.json
        container-name: api
        image: ${{ steps.build-api-image.outputs.image }}

    - name: Update MIGRATIONS container version in task definition
      id: migrations-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: api-task-definition.json
        container-name: migrations
        image: ${{ steps.build-migrations-image.outputs.image }}

    - name: Deploy API service
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.migrations-task-def.outputs.task-definition }}
        service: qa-ni-api
        cluster: qa-ni
        wait-for-service-stability: true

  deploy-penn:
    name: Deploy API to PA
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: Setup Node
      uses: actions/setup-node@v1
      with:
        node-version: '12.13.1'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.PA_QA_KEY }}
        aws-secret-access-key: ${{ secrets.PA_QA_SECRET }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push API image to Amazon ECR
      id: build-api-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: penn/api
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -f ./Dockerfile-api -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Build, tag, and push MIGRATIONS image to Amazon ECR
      id: build-migrations-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: penn/migrations
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -f ./Dockerfile-migrate -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Pull API service current task definition
      run: |
        aws ecs describe-task-definition --task-definition qa-penn-api --query taskDefinition > api-task-definition.json

    - name: Update API container version in task definition
      id: api-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: api-task-definition.json
        container-name: api
        image: ${{ steps.build-api-image.outputs.image }}

    - name: Update MIGRATIONS container version in task definition
      id: migrations-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: api-task-definition.json
        container-name: migrations
        image: ${{ steps.build-migrations-image.outputs.image }}

    - name: Deploy API service
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.migrations-task-def.outputs.task-definition }}
        service: qa-penn-api
        cluster: qa-penn
        wait-for-service-stability: true

  deploy-scot:
    name: Deploy API to SCOT
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: Setup Node
      uses: actions/setup-node@v1
      with:
        node-version: '12.13.1'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.SCOT_QA_KEY }}
        aws-secret-access-key: ${{ secrets.SCOT_QA_SECRET }}
        aws-region: eu-west-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push API image to Amazon ECR
      id: build-api-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: scot/api
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -f ./Dockerfile-api -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Build, tag, and push MIGRATIONS image to Amazon ECR
      id: build-migrations-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: scot/migrations
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -f ./Dockerfile-migrate -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Pull API service current task definition
      run: |
        aws ecs describe-task-definition --task-definition qa-scot-api --query taskDefinition > api-task-definition.json

    - name: Update API container version in task definition
      id: api-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: api-task-definition.json
        container-name: api
        image: ${{ steps.build-api-image.outputs.image }}

    - name: Update MIGRATIONS container version in task definition
      id: migrations-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: api-task-definition.json
        container-name: migrations
        image: ${{ steps.build-migrations-image.outputs.image }}

    - name: Deploy API service
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.migrations-task-def.outputs.task-definition }}
        service: qa-scot-api
        cluster: qa-scot
        wait-for-service-stability: true

  deploy-jers:
    name: Deploy API to JERS
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: Setup Node
      uses: actions/setup-node@v1
      with:
        node-version: '12.13.1'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.JERS_QA_KEY }}
        aws-secret-access-key: ${{ secrets.JERS_QA_SECRET }}
        aws-region: eu-west-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push API image to Amazon ECR
      id: build-api-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: jers/api
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -f ./Dockerfile-api -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Build, tag, and push MIGRATIONS image to Amazon ECR
      id: build-migrations-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: jers/migrations
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -f ./Dockerfile-migrate -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Pull API service current task definition
      run: |
        aws ecs describe-task-definition --task-definition qa-jers-api --query taskDefinition > api-task-definition.json

    - name: Update API container version in task definition
      id: api-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: api-task-definition.json
        container-name: api
        image: ${{ steps.build-api-image.outputs.image }}

    - name: Update MIGRATIONS container version in task definition
      id: migrations-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: api-task-definition.json
        container-name: migrations
        image: ${{ steps.build-migrations-image.outputs.image }}

    - name: Deploy API service
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.migrations-task-def.outputs.task-definition }}
        service: qa-jers-api
        cluster: qa-jers
        wait-for-service-stability: true

  deploy-dela:
    name: Deploy API to DE
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: Setup Node
      uses: actions/setup-node@v1
      with:
        node-version: '12.13.1'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.DE_QA_KEY }}
        aws-secret-access-key: ${{ secrets.DE_QA_SECRET }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push API image to Amazon ECR
      id: build-api-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: dela/api
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -f ./Dockerfile-api -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Build, tag, and push MIGRATIONS image to Amazon ECR
      id: build-migrations-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: dela/migrations
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -f ./Dockerfile-migrate -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Pull API service current task definition
      run: |
        aws ecs describe-task-definition --task-definition qa-dela-api --query taskDefinition > api-task-definition.json

    - name: Update API container version in task definition
      id: api-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: api-task-definition.json
        container-name: api
        image: ${{ steps.build-api-image.outputs.image }}

    - name: Update MIGRATIONS container version in task definition
      id: migrations-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: api-task-definition.json
        container-name: migrations
        image: ${{ steps.build-migrations-image.outputs.image }}

    - name: Deploy API service
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.migrations-task-def.outputs.task-definition }}
        service: qa-dela-api
        cluster: qa-dela
        wait-for-service-stability: true

  deploy-nj:
    name: Deploy API to NJ
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: Setup Node
      uses: actions/setup-node@v1
      with:
        node-version: '12.13.1'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.NJ_QA_KEY }}
        aws-secret-access-key: ${{ secrets.NJ_QA_SECRET }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push API image to Amazon ECR
      id: build-api-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: newjers/api
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -f ./Dockerfile-api -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Build, tag, and push MIGRATIONS image to Amazon ECR
      id: build-migrations-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: newjers/migrations
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -f ./Dockerfile-migrate -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Pull API service current task definition
      run: |
        aws ecs describe-task-definition --task-definition qa-newjers-api --query taskDefinition > api-task-definition.json

    - name: Update API container version in task definition
      id: api-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: api-task-definition.json
        container-name: api
        image: ${{ steps.build-api-image.outputs.image }}

    - name: Update MIGRATIONS container version in task definition
      id: migrations-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: api-task-definition.json
        container-name: migrations
        image: ${{ steps.build-migrations-image.outputs.image }}

    - name: Deploy API service
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.migrations-task-def.outputs.task-definition }}
        service: qa-newjers-api
        cluster: qa-newjers
        wait-for-service-stability: true

  deploy-gi:
    name: Deploy API to GI
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: Setup Node
      uses: actions/setup-node@v1
      with:
        node-version: '12.13.1'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.GI_QA_KEY }}
        aws-secret-access-key: ${{ secrets.GI_QA_SECRET }}
        aws-region: eu-west-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push API image to Amazon ECR
      id: build-api-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: gct/api
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -f ./Dockerfile-api -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Build, tag, and push MIGRATIONS image to Amazon ECR
      id: build-migrations-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: gct/migrations
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -f ./Dockerfile-migrate -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Pull API service current task definition
      run: |
        aws ecs describe-task-definition --task-definition qa-gct-api --query taskDefinition > api-task-definition.json

    - name: Update API container version in task definition
      id: api-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: api-task-definition.json
        container-name: api
        image: ${{ steps.build-api-image.outputs.image }}

    - name: Update MIGRATIONS container version in task definition
      id: migrations-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: api-task-definition.json
        container-name: migrations
        image: ${{ steps.build-migrations-image.outputs.image }}

    - name: Deploy API service
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.migrations-task-def.outputs.task-definition }}
        service: qa-gct-api
        cluster: qa-gct
        wait-for-service-stability: true
